{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/ini.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","either","ini","hljs","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","BARE_KEY","QUOTED_KEY_DOUBLE_QUOTE","QUOTED_KEY_SINGLE_QUOTE","ANY_KEY","DOTTED_KEY","name","aliases","case_insensitive","illegal","starts","module","exports"],"mappings":"qIASA,SAASA,EAAOC,GACd,OAAKA,EACa,kBAAPA,EAAwBA,EAE5BA,EAAGD,OAHM,KAUlB,SAASE,EAAUD,GACjB,OAAOE,EAAO,MAAOF,EAAI,KAO3B,SAASE,KAAUC,GACjB,MAAMC,EAASD,EAAKE,IAAKC,GAAMP,EAAOO,IAAIC,KAAK,IAC/C,OAAOH,EAUT,SAASI,KAAUL,GACjB,MAAMC,EAAS,IAAMD,EAAKE,IAAKC,GAAMP,EAAOO,IAAIC,KAAK,KAAO,IAC5D,OAAOH,EAWT,SAASK,EAAIC,GACX,IAAIC,EAAU,CACZC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CAAEC,MAAO,0BACT,CAAEA,MAAOL,EAAKM,aAGdC,EAAWP,EAAKQ,UACpBD,EAASH,SAAW,CAClB,CAACC,MAAO,IAAKI,IAAK,KAClB,CAACJ,MAAO,IAAKI,IAAK,MAEpB,IAAIC,EAAY,CACdR,UAAW,WACXE,SAAU,CACR,CAAEC,MAAO,qBACT,CAAEA,MAAO,gBAGTM,EAAW,CACbT,UAAW,UACXG,MAAO,gCAELO,EAAU,CACZV,UAAW,SACXW,SAAU,CAACb,EAAKc,kBAChBV,SAAU,CACR,CAAEC,MAAO,MAAOI,IAAK,MAAON,UAAW,IACvC,CAAEE,MAAO,MAAOI,IAAK,MAAON,UAAW,IACvC,CAAEE,MAAO,IAAKI,IAAK,KACnB,CAAEJ,MAAO,IAAKI,IAAK,OAGnBM,EAAQ,CACVV,MAAO,KAAMI,IAAK,KAClBI,SAAU,CACRN,EACAI,EACAD,EACAE,EACAX,EACA,QAEFE,UAAU,GAGRa,EAAW,iBACXC,EAA0B,gBAC1BC,EAA0B,UAC1BC,EAAUrB,EACZkB,EAAUC,EAAyBC,GAEjCE,EAAa5B,EACf2B,EAAS,eAAgBA,EAAS,KAClC5B,EAAU,kBAGZ,MAAO,CACL8B,KAAM,iBACNC,QAAS,CAAC,QACVC,kBAAkB,EAClBC,QAAS,KACTX,SAAU,CACRN,EACA,CACEL,UAAW,UACXG,MAAO,MAAOI,IAAK,OAErB,CACEJ,MAAOe,EACPlB,UAAW,OACXuB,OAAQ,CACNhB,IAAK,IACLI,SAAU,CACRN,EACAQ,EACAJ,EACAD,EACAE,EACAX,OAQZyB,EAAOC,QAAU5B","file":"js/react-syntax-highlighter_languages_highlight_ini.ae1edbd6.js","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  var NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      { begin: /([\\+\\-]+)?[\\d]+_[\\d_]+/ },\n      { begin: hljs.NUMBER_RE }\n    ]\n  };\n  var COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {begin: /;/, end: /$/},\n    {begin: /#/, end: /$/},\n  ];\n  var VARIABLES = {\n    className: 'variable',\n    variants: [\n      { begin: /\\$[\\w\\d\"][\\w\\d_]*/ },\n      { begin: /\\$\\{(.*?)}/ }\n    ]\n  };\n  var LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  var STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      { begin: \"'''\", end: \"'''\", relevance: 10 },\n      { begin: '\"\"\"', end: '\"\"\"', relevance: 10 },\n      { begin: '\"', end: '\"' },\n      { begin: \"'\", end: \"'\" }\n    ]\n  };\n  var ARRAY = {\n    begin: /\\[/, end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance:0\n  };\n\n  var BARE_KEY = /[A-Za-z0-9_-]+/;\n  var QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  var QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  var ANY_KEY = either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  var DOTTED_KEY = concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/, end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n"],"sourceRoot":""}